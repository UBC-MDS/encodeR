% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/conjugate_encoder.R
\name{conjugate_encoder}
\alias{conjugate_encoder}
\title{conjugate_encoder}
\usage{
conjugate_encoder(
  X_train,
  X_test = NULL,
  y,
  cat_columns,
  prior_params,
  objective = "regression"
)
}
\arguments{
\item{X_train}{A `tibble` or `data.frame` representing the training data set
containing some categorical features/columns.}

\item{X_test}{A `tibble` or `data.frame` representing the test set,
containing some set of categorical features/columns.}

\item{y}{A numeric vector or character vector representing the target
variable. If the objective is "binary", then the vector should only contain
two unique values.}

\item{cat_columns}{A character vector containing the names of the
categorical columns in the tibble that should be encoded.}

\item{prior_params}{A list with named parameters that specify the
prior assumed. For regression, this requires a list with named values:
 mu, vega, alpha, beta. All must be real numbers,
alpha should be greater than 0, beta and vega should be greater than 0.
mu can be negative. For binary classification, this requires a list with
four named values: alpha, beta. All must be real numbers and be greater than
0.}

\item{objective}{A string, either "regression" or "binary" specifying the
problem. Default is regression.}
}
\value{
A list containing with processed training and test sets, in which
the named categorical columns are replaced with their encodings. For
regression, the encoder will add one additional dimension to the original
training set since the assumed prior distribution is two dimensional.
}
\description{
This function encodes categorical variables by fitting a posterior
 distribution per each category to the target variable y, using a
 known conjugate-prior. The resulting mean(s) of each posterior distribution
 per each category are used as the encodings.
}
\examples{
conjugate_encoder(
X_train = mtcars,
y = mtcars$mpg,
cat_columns = c("cyl", "vs"),
prior_params = list(mu = 3, vega = 5, alpha = 3, beta = 3),
objective = "regression")
}
